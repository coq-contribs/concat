#############################################################################
##  v      #                   The Coq Proof Assistant                     ##
## <O___,, #                INRIA - CNRS - LIX - LRI - PPS                 ##
##   \VV/  #                                                               ##
##    //   #  Makefile automagically generated by coq_makefile Vtrunk      ##
#############################################################################

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

#
# This Makefile was generated by the command line :
# coq_makefile -f Make -o Makefile 
#

.DEFAULT_GOAL := all

# 
# This Makefile may take arguments passed as environment variables:
# COQBIN to specify the directory where Coq binaries resides;
# TIMECMD set a command to log .v compilation time;
# TIMED if non empty, use the default time command as TIMECMD;
# ZDEBUG/COQDEBUG to specify debug flags for ocamlc&ocamlopt/coqc;
# DSTROOT to specify a prefix to install path.

# Here is a hack to make $(eval $(shell works:
define donewline


endef
includecmdwithout@ = $(eval $(subst @,$(donewline),$(shell { $(1) | tr -d '\r' | tr '\n' '@'; })))
$(call includecmdwithout@,$(COQBIN)coqtop -config)

TIMED=
TIMECMD=
STDTIME?=/usr/bin/time -f "$* (user: %U mem: %M ko)"
TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))

##########################
#                        #
# Libraries definitions. #
#                        #
##########################

COQLIBS?= -R . ConCaT
COQDOCLIBS?=-R . ConCaT

##########################
#                        #
# Variables definitions. #
#                        #
##########################


OPT?=
COQDEP?="$(COQBIN)coqdep" -c
COQFLAGS?=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)
COQCHKFLAGS?=-silent -o
COQDOCFLAGS?=-interpolate -utf8
COQC?=$(TIMER) "$(COQBIN)coqc"
GALLINA?="$(COQBIN)gallina"
COQDOC?="$(COQBIN)coqdoc"
COQCHK?="$(COQBIN)coqchk"
COQMKTOP?="$(COQBIN)coqmktop"

##################
#                #
# Install Paths. #
#                #
##################

ifdef USERINSTALL
XDG_DATA_HOME?="$(HOME)/.local/share"
COQLIBINSTALL=$(XDG_DATA_HOME)/coq
COQDOCINSTALL=$(XDG_DATA_HOME)/doc/coq
else
COQLIBINSTALL="${COQLIB}user-contrib"
COQDOCINSTALL="${DOCDIR}user-contrib"
endif

######################
#                    #
# Files dispatching. #
#                    #
######################

VFILES:=RELATIONS/Relations.v\
  RELATIONS/CONFLUENCE/Confluence.v\
  RELATIONS/CONFLUENCE/NEWMAN/Newman.v\
  RELATIONS/CONFLUENCE/Coherence.v\
  RELATIONS/CONFLUENCE/TAIT/Tait.v\
  RELATIONS/Noetherian.v\
  CATEGORY_THEORY/ADJUNCTION/HomFunctor2.v\
  CATEGORY_THEORY/ADJUNCTION/Adjunction.v\
  CATEGORY_THEORY/ADJUNCTION/Th_CoAdjoint.v\
  CATEGORY_THEORY/ADJUNCTION/FREYD_THEOREM/FAFT_SSC2.v\
  CATEGORY_THEORY/ADJUNCTION/FREYD_THEOREM/FAFT_Part1.v\
  CATEGORY_THEORY/ADJUNCTION/FREYD_THEOREM/FAFT_Part2_Proof1.v\
  CATEGORY_THEORY/ADJUNCTION/FREYD_THEOREM/FAFT_Part2_Proof2.v\
  CATEGORY_THEORY/ADJUNCTION/Adj_FunFreeMon.v\
  CATEGORY_THEORY/ADJUNCTION/Adj_UA.v\
  CATEGORY_THEORY/ADJUNCTION/Adjunction1.v\
  CATEGORY_THEORY/ADJUNCTION/Th_Adjoint.v\
  CATEGORY_THEORY/ADJUNCTION/Limit_Adj.v\
  CATEGORY_THEORY/ADJUNCTION/LeftAdj_Iso.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/FunOne.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/CCC1.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/FunProd.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/Cartesian1.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/Terminal1.v\
  CATEGORY_THEORY/ADJUNCTION/CCC/Diagonal.v\
  CATEGORY_THEORY/LIMITS/Const.v\
  CATEGORY_THEORY/LIMITS/PA.v\
  CATEGORY_THEORY/LIMITS/Products1.v\
  CATEGORY_THEORY/LIMITS/Limit.v\
  CATEGORY_THEORY/LIMITS/Iso_Limit.v\
  CATEGORY_THEORY/LIMITS/FunForget_UA.v\
  CATEGORY_THEORY/LIMITS/Equalizers1.v\
  CATEGORY_THEORY/LIMITS/CoLimit.v\
  CATEGORY_THEORY/LIMITS/Comma_UA.v\
  CATEGORY_THEORY/LIMITS/UniversalArrow.v\
  CATEGORY_THEORY/LIMITS/Pullbacks1.v\
  CATEGORY_THEORY/LIMITS/CoUniversalArrow.v\
  CATEGORY_THEORY/LIMITS/Discr.v\
  CATEGORY_THEORY/LIMITS/PULB.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/Th_Limits.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/HomFunctor_Continuous.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/Comma_Complete.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/Th_Initial.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/Pres_Limits.v\
  CATEGORY_THEORY/LIMIT_CONSTRUCTIONS/SET_Complete.v\
  CATEGORY_THEORY/FUNCTOR/FunctorProperty.v\
  CATEGORY_THEORY/FUNCTOR/Setoid_dup1.v\
  CATEGORY_THEORY/FUNCTOR/PROD_proj.v\
  CATEGORY_THEORY/FUNCTOR/IdCAT.v\
  CATEGORY_THEORY/FUNCTOR/CAT.v\
  CATEGORY_THEORY/FUNCTOR/FSC_inc.v\
  CATEGORY_THEORY/FUNCTOR/Category_dup1.v\
  CATEGORY_THEORY/FUNCTOR/Dual_Functor.v\
  CATEGORY_THEORY/FUNCTOR/HomFunctor.v\
  CATEGORY_THEORY/FUNCTOR/Comma.v\
  CATEGORY_THEORY/FUNCTOR/FunFreeMon.v\
  CATEGORY_THEORY/FUNCTOR/Functor.v\
  CATEGORY_THEORY/FUNCTOR/FunForget.v\
  CATEGORY_THEORY/FUNCTOR/Comma_proj.v\
  CATEGORY_THEORY/CATEGORY/SET.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/CatProperty.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_Exponents.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_Pullback.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/Binary_Products.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SETProperty.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_BinProds.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_CCC.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/CCC.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_Equalizer.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/SET_Terminal.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/Equalizers.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/Exponents.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/Pullbacks.v\
  CATEGORY_THEORY/CATEGORY/CONSTRUCTIONS/Products.v\
  CATEGORY_THEORY/CATEGORY/Category.v\
  CATEGORY_THEORY/CATEGORY/PermCat.v\
  CATEGORY_THEORY/CATEGORY/Hom_Equality.v\
  CATEGORY_THEORY/CATEGORY/PROD.v\
  CATEGORY_THEORY/CATEGORY/FullSubCat.v\
  CATEGORY_THEORY/CATEGORY/ONE.v\
  CATEGORY_THEORY/CATEGORY/Dual.v\
  CATEGORY_THEORY/CATEGORY/MON.v\
  CATEGORY_THEORY/NT/CatFunct.v\
  CATEGORY_THEORY/NT/YONEDA_LEMMA/YonedaLemma.v\
  CATEGORY_THEORY/NT/YONEDA_LEMMA/Map0_dup1.v\
  CATEGORY_THEORY/NT/YONEDA_LEMMA/Functor_dup1.v\
  CATEGORY_THEORY/NT/YONEDA_LEMMA/YonedaEmbedding.v\
  CATEGORY_THEORY/NT/NatIso.v\
  CATEGORY_THEORY/NT/Ntransformation.v\
  CATEGORY_THEORY/NT/HomFunctor_NT.v\
  CATEGORY_THEORY/NT/Setoid_dup2.v\
  CATEGORY_THEORY/NT/InterChangeLaw.v\
  CATEGORY_THEORY/NT/Category_dup2.v\
  SETOID/SetoidPROD.v\
  SETOID/Setoid.v\
  SETOID/BasicTypes.v\
  SETOID/Setoid_prop.v\
  SETOID/Single.v\
  SETOID/Map2.v\
  SETOID/STRUCTURE/Group.v\
  SETOID/STRUCTURE/Monoid.v\
  SETOID/STRUCTURE/Inverses_Group.v\
  SETOID/STRUCTURE/FreeMonoid.v\
  SETOID/Map.v\
  SETOID/MapProperty.v

-include $(addsuffix .d,$(VFILES))
.SECONDARY: $(addsuffix .d,$(VFILES))

VO=vo
VOFILES:=$(VFILES:.v=.$(VO))
GLOBFILES:=$(VFILES:.v=.glob)
GFILES:=$(VFILES:.v=.g)
HTMLFILES:=$(VFILES:.v=.html)
GHTMLFILES:=$(VFILES:.v=.g.html)
ifeq '$(HASNATDYNLINK)' 'true'
HASNATDYNLINK_OR_EMPTY := yes
else
HASNATDYNLINK_OR_EMPTY :=
endif

#######################################
#                                     #
# Definition of the toplevel targets. #
#                                     #
#######################################

all: $(VOFILES) 

quick:
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) all VO=vi
checkproofs:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -schedule-vi-checking $(J) $(VOFILES:%.vo=%.vi)
gallina: $(GFILES)

html: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html $(COQDOCLIBS) -d html $(VFILES)

gallinahtml: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html -g $(COQDOCLIBS) -d html $(VFILES)

all.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

validate: $(VOFILES)
	$(COQCHK) $(COQCHKFLAGS) $(COQLIBS) $(notdir $(^:.vo=))

beautify: $(VFILES:=.beautified)
	for file in $^; do mv $${file%.beautified} $${file%beautified}old && mv $${file} $${file%.beautified}; done
	@echo 'Do not do "make clean" until you are sure that everything went well!'
	@echo 'If there were a problem, execute "for file in $$(find . -name \*.v.old -print); do mv $${file} $${file%.old}; done" in your shell/'

.PHONY: all opt byte archclean clean install uninstall_me.sh uninstall userinstall depend html validate

####################
#                  #
# Special targets. #
#                  #
####################

byte:
	$(MAKE) all "OPT:=-byte"

opt:
	$(MAKE) all "OPT:=-opt"

userinstall:
	+$(MAKE) USERINSTALL=true install

install:
	cd "." && for i in $(VOFILES) $(CMOFILES) $(CMIFILES) $(CMAFILES); do \
	 install -d "`dirname "$(DSTROOT)"$(COQLIBINSTALL)/ConCaT/$$i`"; \
	 install -m 0644 $$i "$(DSTROOT)"$(COQLIBINSTALL)/ConCaT/$$i; \
	done

install-doc:
	install -d "$(DSTROOT)"$(COQDOCINSTALL)/ConCaT/html
	for i in html/*; do \
	 install -m 0644 $$i "$(DSTROOT)"$(COQDOCINSTALL)/ConCaT/$$i;\
	done

uninstall_me.sh:
	echo '#!/bin/sh' > $@ 
	printf 'cd "$${DSTROOT}"$(COQLIBINSTALL)/ConCaT && rm -f $(VOFILES) $(CMOFILES) $(CMIFILES) $(CMAFILES) && find . -type d -and -empty -delete\ncd "$${DSTROOT}"$(COQLIBINSTALL) && find "ConCaT" -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL)/ConCaT \\\n' >> "$@"
	printf '&& rm -f $(shell find "html" -maxdepth 1 -and -type f -print)\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL) && find ConCaT/html -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	chmod +x $@

uninstall: uninstall_me.sh
	sh $<

clean:
	rm -f $(VOFILES) $(VOFILES:.vo=.vi) $(GFILES) $(VFILES:.v=.v.d) $(VFILES:=.beautified) $(VFILES:=.old)
	rm -f all.ps all-gal.ps all.pdf all-gal.pdf all.glob $(VFILES:.v=.glob) $(VFILES:.v=.tex) $(VFILES:.v=.g.tex) all-mli.tex
	- rm -rf html mlihtml uninstall_me.sh

archclean:
	rm -f *.cmx *.o

printenv:
	@"$(COQBIN)coqtop" -config
	@echo 'CAMLC =	$(CAMLC)'
	@echo 'CAMLOPTC =	$(CAMLOPTC)'
	@echo 'PP =	$(PP)'
	@echo 'COQFLAGS =	$(COQFLAGS)'
	@echo 'COQLIBINSTALL =	$(COQLIBINSTALL)'
	@echo 'COQDOCINSTALL =	$(COQDOCINSTALL)'

Makefile: Make
	mv -f $@ $@.bak
	"$(COQBIN)coq_makefile" -f $< -o $@


###################
#                 #
# Implicit rules. #
#                 #
###################

%.vo %.glob: %.v
	$(COQC) $(COQDEBUG) $(COQFLAGS) $*

%.vi: %.v
	$(COQC) -quick $(COQDEBUG) $(COQFLAGS) $*

%.g: %.v
	$(GALLINA) $<

%.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex $< -o $@

%.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS) -html $< -o $@

%.g.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex -g $< -o $@

%.g.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS)  -html -g $< -o $@

%.v.d: %.v
	$(COQDEP) $(COQLIBS) "$<" > "$@" || ( RV=$$?; rm -f "$@"; exit $${RV} )

%.v.beautified:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -beautify $*

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

